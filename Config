#!/bin/sh 

if [ "$LOCALCC" = "" ] ; then
	LOCALCC=gcc
fi
export LOCALCC
if [ "$LOCALCXX" = "" ] ; then
	LOCALCXX=g++
fi
export LOCALCXX


if [ "$1" = "-f" ] ; then
	rm -f commonvars[12].old
	shift
fi


LIBROOT=${LIBROOT:-$HOME}


if [ "$TCL_MON_PATH" = "" ] ; then
    for d in  $LIBROOT/tclmon ../tclmon ../../tclmon ; do
        if [ -d $d ] ; then
	    TCL_MON_PATH=`(cd $d;pwd)`
            break;
        fi
    done
fi
if [ "$SERVERLIB_PATH" = "" ] ; then
    for d in  $LIBROOT/serverlib ../serverlib ../../serverlib ; do
        if [ -d $d ] ; then
	    SERVERLIB_PATH=`(cd $d;pwd)`
            break;
        fi
    done
fi
if [ "$JXTLIB_PATH" = "" ] ; then
    for d in  $LIBROOT/jxtlib ../jxtlib ../../jxtlib ; do
        if [ -d $d ] ; then
	    JXTLIB_PATH=`(cd $d;pwd)`
            break;
        fi
    done
fi

if [ "$BOOST" = "" ] ; then
    for d in  $LIBROOT/BOOST ../BOOST ../../BOOST ; do
        if [ -d $d/ ] ; then
	    BOOST=`(cd $d;pwd)`
            break;
        fi
    done
fi

if [ "$LIBXML2" = "" ] ; then
    for d in  /usr /usr/local $LIBROOT/libxml2 ; do
        if [ -f $d/bin/xml2-config ] ; then
	    LIBXML2=`(cd $d;pwd)`
            break;
        fi
    done
fi

if [ "$LIBXSLT" = "" ] ; then
    for d in  /usr /usr/local $HOME/libxslt ; do
        if [ -f $d/bin/xslt-config ] ; then
	    LIBXSLT=`(cd $d;pwd)`
            break;
        fi
    done
fi



if [ "$EDILIB_PATH" = "" ] && [ ! "$EDILIB_PATH" = "NO" ] ; then
    for d in $HOME/edilib ../edilib ../../edilib ; do
    	if [ -d $d ] ; then
	    EDILIB_PATH=`(cd $d && pwd)`
            break;
	fi
    done
fi

if [ "$EDILIB_PATH" = "NO" ] ; then EDILIB_PATH=""; fi

if [ ! "$EDILIB_PATH" = "" ] ; then
    EDILIB=$EDILIB_PATH/lib/edilib.a
    EDIINC=-I$EDILIB_PATH/include
    EDILIBMODE=-D_EDILIB_
cat > edilib_path <<EOF
$EDILIB_PATH
EOF
fi

cat <<EOF

Please don't change file 'makefile' manualy
change  commonvars[12].mk instead
if you don't like defauts
TCL_MON_PATH=${TCL_MON_PATH:-${HOME}/tclmon}
SERVERLIB_PATH=${SERVERLIB_PATH:-${HOME}/serverlib}
JXTLIB_PATH=${JXTLIB_PATH:-${HOME}/jxtlib}
LIBXML2=${LIBXML2:-/usr}
LIBXSLT=${LIBXSLT:-/usr}
EDILIB_PATH=${EDILIB_PATH}
EOF
[ -f deps ] || echo >deps
SRCHOME=`pwd`
if [ -f commonvars1.mk -o -f commonvars2.mk ] ; then
    if [ -f commonvars1.old  -o -f commonvars2.old ] ;then
        echo commonvars*.old exists - delete first
        exit
    fi
    mv commonvars1.mk commonvars1.old
    mv commonvars2.mk commonvars2.old
fi
if [  "$XP_TESTING" ] ; then
cat >/tmp/test$$.cc <<EOF
#include "unit_check.h"
int main(void)
{
return 0;
}
EOF

if $LOCALCXX -I .  /tmp/test$$.cc -L/usr/local/lib -lcheck >/dev/null 2>&1 ; then
export XP_TESTING
else
XP_TESTING=
fi

fi

cat >/tmp/test$$.cc <<EOF
#include <hash_map>
using std::hash_map;
using std::hash;
struct eqstr_ {
bool operator()(const char *a,const char *b) const
{
    return 0;
}
};
typedef hash_map<const  char *, int , hash<const char*> ,
    eqstr_> test;
EOF

if $LOCALCXX -c /tmp/test$$.cc   >/dev/null 2>&1 ; then
HAS_HASHMAP="-DHAS_HASHMAP"
fi
if [ "$LIBXSLT" != "" ] ; then
HAS_XSLT="-DXSLT"
fi  
cat >/tmp/test$$.c <<EOF
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <arpa/inet.h>

int main(){
recvfrom(0,0,0,0,0,(SIRENA_SOCKLEN_T_*)0);
}
EOF
for i in socklen_t size_t int ; do
if $LOCALCXX -D SIRENA_SOCKLEN_T_=$i -o /dev/null -c  /tmp/test$$.c ; then
SIRENA_SOCKLEN_T_=$i
break;
fi
done

cat >commonvars1.mk <<EOF
XP_TESTING=$XP_TESTING
CC=$LOCALCC
CXX=$LOCALCXX
BOOST=${BOOST:-boost_not_found}
TCL_MON_PATH=${TCL_MON_PATH:-tclmon_not_found}
EDILIB_PATH=${EDILIB_PATH}
LIBXML2=${LIBXML2:-/usr}
LIBXSLT=${LIBXSLT:-/usr}
SRCHOME=${SRCHOME}
TCLMODE=-DTCL_MODE
#AIR=-DAIRIMP 
#AIRIMPLIB=airimp/airimp.a
EDILIB=${EDILIB}
EDIINC=${EDIINC}
SERVERLIB_PATH=${SERVERLIB_PATH:-serverlib_not_found}
JXTLIB_PATH=${JXTLIB_PATH:-jxtlib_not_found}
export SERVERLIB_PATH
export JXTLIB_PATH
EDILIBMODE=${EDILIBMODE}
ifdef XP_TESTING
XP_TESTING_FLAGS=-DXP_TESTING
endif
#MPATROL_FLAGS=-DHAVE_MATROL -DMP_NOCPLUSPLUS=1
LOCALFLAGS=\$(XP_TESTING_FLAGS) \$(MPATROL_FLAGS) $HAS_HASHMAP $HAS_XSLT \\
    -D SIRENA_SOCKLEN_T_=$SIRENA_SOCKLEN_T_
ifdef XP_TESTING
XP_TESTINGLIBS=tests/alltestslib.a
endif
EOF
./confsys
cat >/tmp/test$$.c <<EOF
int main(){
#if __GNUC__ >2 && __GNUC_MINOR__ >2 
return 0;
#else
return 1;
#endif

}
EOF
./confsys  
$LOCALCC -o /tmp/testgccv$$ /tmp/test$$.c
if /tmp/testgccv$$ ; then 
:
else

if [ "$CPPINCLUDE" = "" ] ; then
	for d in  $HOME ; do
		CPPINCLUDE=`find $d -name algorithm -print | \
			egrep -v '(stlport|doc)' |  sed 's#/algorithm$##'`
		if [ `echo "$CPPINCLUDE" | wc -l` -ne 1  ] ; then
			CPPINCLUDE=""
		fi
		if [ "$CPPINCLUDE" != "" ] ; then 
			CPPINCLUDE=`cd $CPPINCLUDE ; pwd`
			break;
		fi	
	done
fi
if [ "$CPPINCLUDE" = "" ] ; then
cat >>commonvars1.mk <<EOF
#CPPINCLUDE=-I$SRCHOME/../stl
EOF
else
cat >>commonvars1.mk <<EOF
CPPINCLUDE=-I$CPPINCLUDE
EOF

fi
fi


if $LIBXML2/bin/xml2-config --libs | grep -v -e -lm >/dev/null; then
echo 'int main() {} ' >/tmp/test$$.c
if $LOCALCC /tmp/test$$.c  -lm  >/dev/null 2>&1 ; then
LIBMATH="-lm"
fi
fi



if [ "$CPPINCLUDE" = "/usr/local/include/stlport" ] ; then
STLPORTLIB="-lpthread -L /usr/local/lib -lstlport_gcc"
fi
if [ "$LIBXSLT" != "" ] ; then 
cat >>commonvars1.mk <<EOF
LIBXML2INCLUDE=`$LIBXSLT/bin/xslt-config --cflags`
EOF
cat >commonvars2.mk <<EOF
LIBXML2LIB=`$LIBXSLT/bin/xslt-config --libs` $LIBMATH
EOF
else 
cat >>commonvars1.mk <<EOF
LIBXML2INCLUDE=`$LIBXML2/bin/xml2-config --cflags`
EOF
cat >commonvars2.mk <<EOF
LIBXML2LIB=`$LIBXML2/bin/xml2-config --libs` $LIBMATH
EOF
fi
cat >>commonvars2.mk <<EOF
CPPLIBS=$STLPORTLIB -lstdc++
#MPATROL_LIBS=-lmpatrol -lelf 
ifdef XP_TESTING
XP_TESTINGLIBSSYS=-lcheck
endif
LOCALLIBS=\$(XP_TESTINGLIBSSYS) \$(MPATROL_LIBS) \$(CPPLIBS) \$(LDCRYPT)
EOF

[ -f sirena.cfg ] ||  echo "cp  sirena.cf sirena.cfg ;  chmod +w sirena.cfg"
[ -f sirena.cfg ] ||  cp  sirena.cf sirena.cfg &&  chmod +w sirena.cfg
#[ -f local_def.h ] ||  echo "cp  local_def_example.h local_def.h ;  chmod +w local_def.h"
#[ -f local_def.h ] ||  cp local_def_example.h local_def.h &&  chmod +w local_def.h
[ -f local_def.h ] ||  echo "NO local_def.h. Don't forget to copy it"
[ -f local_def.h ] ||  echo "from old version or local_def_example.h"
[ -f testing_def.h ] ||  echo "echo > testing_def.h" 
[ -f testing_def.h ] ||  echo > testing_def.h 
[ -d airimp ] && touch airimp/deps
[ -d tests ] && touch tests/deps
if [ "$TCL_MON_PATH" = "" ] ; then
    echo "!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!"
    echo "ERROR: checkout and compile tclmon module"
fi
if [ "$SERVERLIB_PATH" = "" ] ; then
    echo "!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!"
    echo "ERROR: checkout and compile serverlib module"
    echo "ERROR: oracle.mk link must be invalid! Remake it!"
fi
if [ "$JXTLIB_PATH" = "" ] ; then
    echo "!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!"
    echo "ERROR: checkout and compile jxtlib module"
fi

